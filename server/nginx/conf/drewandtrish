lua_package_path "/usr/local/openresty/nginx/lua/?.lua;;";
# init_by_lua '
#   AuthManager = require "AuthManager"
# ';
client_body_buffer_size 10K;
client_header_buffer_size 1k;
client_max_body_size 8m;
large_client_header_buffers 2 1k;
keepalive_timeout 65;

  server {
		listen       443;
		server_name  www.drewandtrish.com;
		#add_header Strict-Transport-Security max-age=2592000;
		ssl on;
		ssl_certificate /etc/pki/ssl-unified.crt;
		ssl_certificate_key /etc/pki/www.drewandtrish.com.key;

		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
		ssl_ciphers ECDHE-RSA-AES256-SHA384:AES256-SHA256:RC4:HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM;
		ssl_prefer_server_ciphers on;
		ssl_session_cache shared:SSL:10m;
		ssl_session_timeout 10m;


		location ~ "/$" {
      rewrite ^ https://$server_name/html/index-optimize.html#/controls/mainFloor permanent;
    }
    location ~ "/seneschal.manifest" {
      access_log off;
      add_header 'Content-Type' 'text/plain charset=UTF-8';
      add_header 'Cache-Control' 'no-cache, no-store, max-age=0, must-revalidate';
      root /home/pi/dev/seneschal/client/build/resources/main;
		}
    location / {
      access_log off;
      add_header 'Cache-Control' 'no-cache, no-store, max-age=0, must-revalidate';
      root /home/pi/dev/seneschal/client/build/resources/main;
		}
    location /login {
      set $cors "true";
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' "$http_origin";
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since';
        add_header 'Content-Length' 0;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        return 204;
      }
      add_header 'Content-Type' 'text/plain charset=UTF-8';
      rewrite_by_lua "
        local AuthManager = require 'AuthManager'
        AuthManager.login()
      ";
    }
    location /cameras {
      access_log off;
      proxy_redirect off;
      rewrite_by_lua "
        local AuthManager = require 'AuthManager'
        AuthManager.authByGetRewrite('foscam','user','pwd')
      ";
      rewrite ^/cameras/(.+)/(.+)/(.*) /$3 break;
      proxy_set_header        Accept-Encoding   "";
      proxy_set_header        Host            $host;
      proxy_set_header        X-Real-IP       $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass http://$1:$2;
    }
    location /proxiedCameras {
      access_log off;
      proxy_redirect off;
      rewrite_by_lua "
        local AuthManager = require 'AuthManager'
        AuthManager.authByBasic('foscam','user','pwd')
      ";
      rewrite ^/proxiedCameras/(.+)/(.+)/(.*) /$3 break;
      proxy_set_header        Accept-Encoding   "";
      proxy_set_header        Host            $host;
      proxy_set_header        X-Real-IP       $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass http://$1:$2;
    }

    location /createUser{
      default_type 'text/plain';
      content_by_lua "
        local AuthManager = require 'AuthManager'
        AuthManager.createUser()
      ";
    }
		location /getRabbitCredentials {
       access_log off;
       default_type 'application/json';
       content_by_lua  "
         local AuthManager = require 'AuthManager'
         AuthManager.getCreds('rabbitmq')
       ";
		}
		location /rabbitmq{
			access_log off;
			proxy_pass http://localhost:15674;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_read_timeout 180s;

			# WebSocket support (nginx 1.4)
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";

			rewrite ^/rabbitmq/(.+) /$1 break;
			proxy_redirect off;
		}
	}
